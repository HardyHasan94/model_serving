0 - SSH key based communication between Production and Development Servers 

  - Login to Development Server 
    
    # ssh -i cluster-key appuser@<DEVELOPMENT-SERVER-IP>

  - Generate SSH key 
    
    # ssh-keygen 

  NOTE: This step will create two files, private key "/home/appuser/.ssh/id_rsa" and public key "/home/appuser/.ssh/id_rsa.pub".

  - copy contents of the public key file "/home/appuser/.ssh/id_rsa.pub"

  - Login to Production Server
    
    # ssh -i cluster-key appuser@<PRODUCTION-SERVER-IP>

  - Open file ""/home/appuser/.ssh/authorized_keys" and past the contents of the public key files. 

    # nano /home/appuser/.ssh/authorized_keys
  
-----------------------------------------------------------  

1 - Login to the Production Server 

   # ssh -i cluster-key appuser@<PRODUCTION-SERVER-IP> 

 - Create a directory (it will be jump directory)
   
   # pwd 
     /home/appuser/
   
   # mkdir my_project

   # cd my_project

 - Here is the path to your jump directory. Double check that user "appuser" is the owner of "my_project" directory. 
   
   # pwd
     /home/appuser/my_project       

 - Create git empty directory 
   
   # git init --bare
   
   Initialized empty Git repository in /home/appuser/my_project/

 - Create a git hook "post-receive"
 
   # nano hooks/post-receive
 
---------- post-receive -------------
#!/bin/bash
while read oldrev newrev ref
do
    if [[ $ref =~ .*/master$ ]];
    then
        echo "Master ref received.  Deploying master branch to production..."
        git --work-tree=/technical-training/model-serving/ci_cd/production_server --git-dir=/home/appuser/my_project checkout -f
    else
        echo "Ref $ref successfully received.  Doing nothing: only the master branch may be deployed on this server."
    fi
done
-------------------------------------

 - Change permissions 

 # chmod +x hooks/post-receive

 - Exit Production Server

-----------------------------------------------------------

2 - login to the Development Server

   # ssh -i cluster-key appuser@<DEVELOPMENT-SERVER-IP>

 - Create a directory

   # pwd
     /home/appuser/

   # mkdir my_project

   # cd my_project

 - This is your development directory. Double check that user "appuser" is the owner of "my_project" directory.

   # pwd
     /home/appuser/my_project 

 - Create git empty directory

   # git init
   
   Initialized empty Git repository in /home/appuser/project/.git/

 - Add files model.h5 and  model.json in "/home/appuser/project/" directory. The files are available in "/technical-training/model-serving/ci_cd/development_server/" directory. 

 - Goto "/home/appuser/project" directory
    
 - Add files for the commit 
   
   # git add .

 - Commit files 
   
   # git commit -m "new model" 
 
 - connect development server's git to production server's git. 

   # git remote add production appuser@<PRODUCTIONS-SERVER-IP>:/home/appuser/my_project

 - Push your commits to the production server

   # git push production master
 
   Delta compression using up to 2 threads.
   Compressing objects: 100% (4/4), done.
   Writing objects: 100% (4/4), 2.36 KiB | 2.36 MiB/s, done.
   Total 4 (delta 0), reused 0 (delta 0)
   remote: Master ref received.  Deploying master branch to production...
   To 192.168.1.21:/home/appuser/my_project
   * [new branch]      master -> master  

